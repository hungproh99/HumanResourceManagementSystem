/*
 * This file is generated by jOOQ.
 */
package org.jooq.codegen.maven.example.tables;


import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.codegen.maven.example.HumanResourceManagement;
import org.jooq.codegen.maven.example.Keys;
import org.jooq.codegen.maven.example.tables.records.SalaryContractRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SalaryContract extends TableImpl<SalaryContractRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>human_resource_management.salary_contract</code>
     */
    public static final SalaryContract SALARY_CONTRACT = new SalaryContract();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SalaryContractRecord> getRecordType() {
        return SalaryContractRecord.class;
    }

    /**
     * The column
     * <code>human_resource_management.salary_contract.salary_contract_id</code>.
     */
    public final TableField<SalaryContractRecord, Long> SALARY_CONTRACT_ID = createField(DSL.name("salary_contract_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column
     * <code>human_resource_management.salary_contract.additional_salary</code>.
     */
    public final TableField<SalaryContractRecord, BigDecimal> ADDITIONAL_SALARY = createField(DSL.name("additional_salary"), SQLDataType.DECIMAL(19, 2), this, "");

    /**
     * The column
     * <code>human_resource_management.salary_contract.base_salary</code>.
     */
    public final TableField<SalaryContractRecord, BigDecimal> BASE_SALARY = createField(DSL.name("base_salary"), SQLDataType.DECIMAL(19, 2), this, "");

    /**
     * The column
     * <code>human_resource_management.salary_contract.salary_contract_status</code>.
     */
    public final TableField<SalaryContractRecord, Boolean> SALARY_CONTRACT_STATUS = createField(DSL.name("salary_contract_status"), SQLDataType.BIT, this, "");

    /**
     * The column
     * <code>human_resource_management.salary_contract.start_date</code>.
     */
    public final TableField<SalaryContractRecord, LocalDate> START_DATE = createField(DSL.name("start_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column
     * <code>human_resource_management.salary_contract.working_contract_id</code>.
     */
    public final TableField<SalaryContractRecord, Long> WORKING_CONTRACT_ID = createField(DSL.name("working_contract_id"), SQLDataType.BIGINT, this, "");

    private SalaryContract(Name alias, Table<SalaryContractRecord> aliased) {
        this(alias, aliased, null);
    }

    private SalaryContract(Name alias, Table<SalaryContractRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>human_resource_management.salary_contract</code>
     * table reference
     */
    public SalaryContract(String alias) {
        this(DSL.name(alias), SALARY_CONTRACT);
    }

    /**
     * Create an aliased <code>human_resource_management.salary_contract</code>
     * table reference
     */
    public SalaryContract(Name alias) {
        this(alias, SALARY_CONTRACT);
    }

    /**
     * Create a <code>human_resource_management.salary_contract</code> table
     * reference
     */
    public SalaryContract() {
        this(DSL.name("salary_contract"), null);
    }

    public <O extends Record> SalaryContract(Table<O> child, ForeignKey<O, SalaryContractRecord> key) {
        super(child, key, SALARY_CONTRACT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : HumanResourceManagement.HUMAN_RESOURCE_MANAGEMENT;
    }

    @Override
    public Identity<SalaryContractRecord, Long> getIdentity() {
        return (Identity<SalaryContractRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<SalaryContractRecord> getPrimaryKey() {
        return Keys.KEY_SALARY_CONTRACT_PRIMARY;
    }

    @Override
    public List<ForeignKey<SalaryContractRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKGLRNNRQ4EI66HMXLAUPIJ0KNH);
    }

    private transient WorkingContract _workingContract;

    /**
     * Get the implicit join path to the
     * <code>human_resource_management.working_contract</code> table.
     */
    public WorkingContract workingContract() {
        if (_workingContract == null)
            _workingContract = new WorkingContract(this, Keys.FKGLRNNRQ4EI66HMXLAUPIJ0KNH);

        return _workingContract;
    }

    @Override
    public SalaryContract as(String alias) {
        return new SalaryContract(DSL.name(alias), this);
    }

    @Override
    public SalaryContract as(Name alias) {
        return new SalaryContract(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SalaryContract rename(String name) {
        return new SalaryContract(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SalaryContract rename(Name name) {
        return new SalaryContract(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, BigDecimal, BigDecimal, Boolean, LocalDate, Long> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}

/*
 * This file is generated by jOOQ.
 */
package org.jooq.codegen.maven.example.tables;


import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row19;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.codegen.maven.example.HumanResourceManagement;
import org.jooq.codegen.maven.example.Keys;
import org.jooq.codegen.maven.example.tables.records.SalaryMonthlyRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SalaryMonthly extends TableImpl<SalaryMonthlyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>human_resource_management.salary_monthly</code>
     */
    public static final SalaryMonthly SALARY_MONTHLY = new SalaryMonthly();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SalaryMonthlyRecord> getRecordType() {
        return SalaryMonthlyRecord.class;
    }

    /**
     * The column
     * <code>human_resource_management.salary_monthly.salary_id</code>.
     */
    public final TableField<SalaryMonthlyRecord, Long> SALARY_ID = createField(DSL.name("salary_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column
     * <code>human_resource_management.salary_monthly.actual_point</code>.
     */
    public final TableField<SalaryMonthlyRecord, Double> ACTUAL_POINT = createField(DSL.name("actual_point"), SQLDataType.DOUBLE, this, "");

    /**
     * The column
     * <code>human_resource_management.salary_monthly.end_date</code>.
     */
    public final TableField<SalaryMonthlyRecord, LocalDate> END_DATE = createField(DSL.name("end_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column
     * <code>human_resource_management.salary_monthly.final_salary</code>.
     */
    public final TableField<SalaryMonthlyRecord, BigDecimal> FINAL_SALARY = createField(DSL.name("final_salary"), SQLDataType.DECIMAL(19, 2), this, "");

    /**
     * The column
     * <code>human_resource_management.salary_monthly.ot_point</code>.
     */
    public final TableField<SalaryMonthlyRecord, Double> OT_POINT = createField(DSL.name("ot_point"), SQLDataType.DOUBLE, this, "");

    /**
     * The column
     * <code>human_resource_management.salary_monthly.standard_point</code>.
     */
    public final TableField<SalaryMonthlyRecord, Double> STANDARD_POINT = createField(DSL.name("standard_point"), SQLDataType.DOUBLE, this, "");

    /**
     * The column
     * <code>human_resource_management.salary_monthly.start_date</code>.
     */
    public final TableField<SalaryMonthlyRecord, LocalDate> START_DATE = createField(DSL.name("start_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column
     * <code>human_resource_management.salary_monthly.total_advance</code>.
     */
    public final TableField<SalaryMonthlyRecord, BigDecimal> TOTAL_ADVANCE = createField(DSL.name("total_advance"), SQLDataType.DECIMAL(19, 2), this, "");

    /**
     * The column
     * <code>human_resource_management.salary_monthly.total_bonus</code>.
     */
    public final TableField<SalaryMonthlyRecord, BigDecimal> TOTAL_BONUS = createField(DSL.name("total_bonus"), SQLDataType.DECIMAL(19, 2), this, "");

    /**
     * The column
     * <code>human_resource_management.salary_monthly.total_deduction</code>.
     */
    public final TableField<SalaryMonthlyRecord, BigDecimal> TOTAL_DEDUCTION = createField(DSL.name("total_deduction"), SQLDataType.DECIMAL(19, 2), this, "");

    /**
     * The column
     * <code>human_resource_management.salary_monthly.total_insurance_payment</code>.
     */
    public final TableField<SalaryMonthlyRecord, BigDecimal> TOTAL_INSURANCE_PAYMENT = createField(DSL.name("total_insurance_payment"), SQLDataType.DECIMAL(19, 2), this, "");

    /**
     * The column
     * <code>human_resource_management.salary_monthly.total_tax_payment</code>.
     */
    public final TableField<SalaryMonthlyRecord, BigDecimal> TOTAL_TAX_PAYMENT = createField(DSL.name("total_tax_payment"), SQLDataType.DECIMAL(19, 2), this, "");

    /**
     * The column
     * <code>human_resource_management.salary_monthly.salary_contract_id</code>.
     */
    public final TableField<SalaryMonthlyRecord, Long> SALARY_CONTRACT_ID = createField(DSL.name("salary_contract_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>human_resource_management.salary_monthly.salary_status_id</code>.
     */
    public final TableField<SalaryMonthlyRecord, Long> SALARY_STATUS_ID = createField(DSL.name("salary_status_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>human_resource_management.salary_monthly.is_remind</code>.
     */
    public final TableField<SalaryMonthlyRecord, Boolean> IS_REMIND = createField(DSL.name("is_remind"), SQLDataType.BIT, this, "");

    /**
     * The column
     * <code>human_resource_management.salary_monthly.approver</code>.
     */
    public final TableField<SalaryMonthlyRecord, String> APPROVER = createField(DSL.name("approver"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>human_resource_management.salary_monthly.duration</code>.
     */
    public final TableField<SalaryMonthlyRecord, LocalDate> DURATION = createField(DSL.name("duration"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>human_resource_management.salary_monthly.comment</code>.
     */
    public final TableField<SalaryMonthlyRecord, String> COMMENT = createField(DSL.name("comment"), SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column
     * <code>human_resource_management.salary_monthly.total_allowance</code>.
     */
    public final TableField<SalaryMonthlyRecord, BigDecimal> TOTAL_ALLOWANCE = createField(DSL.name("total_allowance"), SQLDataType.DECIMAL(19, 2), this, "");

    private SalaryMonthly(Name alias, Table<SalaryMonthlyRecord> aliased) {
        this(alias, aliased, null);
    }

    private SalaryMonthly(Name alias, Table<SalaryMonthlyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>human_resource_management.salary_monthly</code>
     * table reference
     */
    public SalaryMonthly(String alias) {
        this(DSL.name(alias), SALARY_MONTHLY);
    }

    /**
     * Create an aliased <code>human_resource_management.salary_monthly</code>
     * table reference
     */
    public SalaryMonthly(Name alias) {
        this(alias, SALARY_MONTHLY);
    }

    /**
     * Create a <code>human_resource_management.salary_monthly</code> table
     * reference
     */
    public SalaryMonthly() {
        this(DSL.name("salary_monthly"), null);
    }

    public <O extends Record> SalaryMonthly(Table<O> child, ForeignKey<O, SalaryMonthlyRecord> key) {
        super(child, key, SALARY_MONTHLY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : HumanResourceManagement.HUMAN_RESOURCE_MANAGEMENT;
    }

    @Override
    public Identity<SalaryMonthlyRecord, Long> getIdentity() {
        return (Identity<SalaryMonthlyRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<SalaryMonthlyRecord> getPrimaryKey() {
        return Keys.KEY_SALARY_MONTHLY_PRIMARY;
    }

    @Override
    public List<ForeignKey<SalaryMonthlyRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKSID0Y6G0SPTJ4B1S4YE7HQNT7, Keys.FKJOHK0L98NYFOT4UYSMV3GQBK8);
    }

    private transient SalaryContract _salaryContract;
    private transient SalaryStatus _salaryStatus;

    /**
     * Get the implicit join path to the
     * <code>human_resource_management.salary_contract</code> table.
     */
    public SalaryContract salaryContract() {
        if (_salaryContract == null)
            _salaryContract = new SalaryContract(this, Keys.FKSID0Y6G0SPTJ4B1S4YE7HQNT7);

        return _salaryContract;
    }

    /**
     * Get the implicit join path to the
     * <code>human_resource_management.salary_status</code> table.
     */
    public SalaryStatus salaryStatus() {
        if (_salaryStatus == null)
            _salaryStatus = new SalaryStatus(this, Keys.FKJOHK0L98NYFOT4UYSMV3GQBK8);

        return _salaryStatus;
    }

    @Override
    public SalaryMonthly as(String alias) {
        return new SalaryMonthly(DSL.name(alias), this);
    }

    @Override
    public SalaryMonthly as(Name alias) {
        return new SalaryMonthly(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SalaryMonthly rename(String name) {
        return new SalaryMonthly(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SalaryMonthly rename(Name name) {
        return new SalaryMonthly(name, null);
    }

    // -------------------------------------------------------------------------
    // Row19 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row19<Long, Double, LocalDate, BigDecimal, Double, Double, LocalDate, BigDecimal, BigDecimal, BigDecimal, BigDecimal, BigDecimal, Long, Long, Boolean, String, LocalDate, String, BigDecimal> fieldsRow() {
        return (Row19) super.fieldsRow();
    }
}

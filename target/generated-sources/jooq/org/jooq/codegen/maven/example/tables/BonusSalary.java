/*
 * This file is generated by jOOQ.
 */
package org.jooq.codegen.maven.example.tables;


import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.codegen.maven.example.HumanResourceManagement;
import org.jooq.codegen.maven.example.Keys;
import org.jooq.codegen.maven.example.tables.records.BonusSalaryRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BonusSalary extends TableImpl<BonusSalaryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>human_resource_management.bonus_salary</code>
     */
    public static final BonusSalary BONUS_SALARY = new BonusSalary();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BonusSalaryRecord> getRecordType() {
        return BonusSalaryRecord.class;
    }

    /**
     * The column <code>human_resource_management.bonus_salary.bonus_id</code>.
     */
    public final TableField<BonusSalaryRecord, Long> BONUS_ID = createField(DSL.name("bonus_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>human_resource_management.bonus_salary.date</code>.
     */
    public final TableField<BonusSalaryRecord, LocalDate> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column
     * <code>human_resource_management.bonus_salary.description</code>.
     */
    public final TableField<BonusSalaryRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>human_resource_management.bonus_salary.value</code>.
     */
    public final TableField<BonusSalaryRecord, BigDecimal> VALUE = createField(DSL.name("value"), SQLDataType.DECIMAL(19, 2), this, "");

    /**
     * The column
     * <code>human_resource_management.bonus_salary.bonus_type_id</code>.
     */
    public final TableField<BonusSalaryRecord, Long> BONUS_TYPE_ID = createField(DSL.name("bonus_type_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>human_resource_management.bonus_salary.salary_id</code>.
     */
    public final TableField<BonusSalaryRecord, Long> SALARY_ID = createField(DSL.name("salary_id"), SQLDataType.BIGINT, this, "");

    private BonusSalary(Name alias, Table<BonusSalaryRecord> aliased) {
        this(alias, aliased, null);
    }

    private BonusSalary(Name alias, Table<BonusSalaryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>human_resource_management.bonus_salary</code>
     * table reference
     */
    public BonusSalary(String alias) {
        this(DSL.name(alias), BONUS_SALARY);
    }

    /**
     * Create an aliased <code>human_resource_management.bonus_salary</code>
     * table reference
     */
    public BonusSalary(Name alias) {
        this(alias, BONUS_SALARY);
    }

    /**
     * Create a <code>human_resource_management.bonus_salary</code> table
     * reference
     */
    public BonusSalary() {
        this(DSL.name("bonus_salary"), null);
    }

    public <O extends Record> BonusSalary(Table<O> child, ForeignKey<O, BonusSalaryRecord> key) {
        super(child, key, BONUS_SALARY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : HumanResourceManagement.HUMAN_RESOURCE_MANAGEMENT;
    }

    @Override
    public Identity<BonusSalaryRecord, Long> getIdentity() {
        return (Identity<BonusSalaryRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<BonusSalaryRecord> getPrimaryKey() {
        return Keys.KEY_BONUS_SALARY_PRIMARY;
    }

    @Override
    public List<ForeignKey<BonusSalaryRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKSBQE39PRU0AEPFVKO83H1MG8I, Keys.FKKTYVYCH5175BNVQE1R7N01I9E);
    }

    private transient BonusType _bonusType;
    private transient SalaryMonthly _salaryMonthly;

    /**
     * Get the implicit join path to the
     * <code>human_resource_management.bonus_type</code> table.
     */
    public BonusType bonusType() {
        if (_bonusType == null)
            _bonusType = new BonusType(this, Keys.FKSBQE39PRU0AEPFVKO83H1MG8I);

        return _bonusType;
    }

    /**
     * Get the implicit join path to the
     * <code>human_resource_management.salary_monthly</code> table.
     */
    public SalaryMonthly salaryMonthly() {
        if (_salaryMonthly == null)
            _salaryMonthly = new SalaryMonthly(this, Keys.FKKTYVYCH5175BNVQE1R7N01I9E);

        return _salaryMonthly;
    }

    @Override
    public BonusSalary as(String alias) {
        return new BonusSalary(DSL.name(alias), this);
    }

    @Override
    public BonusSalary as(Name alias) {
        return new BonusSalary(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BonusSalary rename(String name) {
        return new BonusSalary(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BonusSalary rename(Name name) {
        return new BonusSalary(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, LocalDate, String, BigDecimal, Long, Long> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}

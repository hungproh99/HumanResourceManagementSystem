/*
 * This file is generated by jOOQ.
 */
package org.jooq.codegen.maven.example.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.codegen.maven.example.HumanResourceManagement;
import org.jooq.codegen.maven.example.Keys;
import org.jooq.codegen.maven.example.tables.records.PolicyRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Policy extends TableImpl<PolicyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>human_resource_management.policy</code>
     */
    public static final Policy POLICY = new Policy();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PolicyRecord> getRecordType() {
        return PolicyRecord.class;
    }

    /**
     * The column <code>human_resource_management.policy.policy_id</code>.
     */
    public final TableField<PolicyRecord, String> POLICY_ID = createField(DSL.name("policy_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>human_resource_management.policy.data</code>.
     */
    public final TableField<PolicyRecord, String> DATA = createField(DSL.name("data"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>human_resource_management.policy.description</code>.
     */
    public final TableField<PolicyRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>human_resource_management.policy.effective_date</code>.
     */
    public final TableField<PolicyRecord, LocalDate> EFFECTIVE_DATE = createField(DSL.name("effective_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column
     * <code>human_resource_management.policy.maximum_level_accept</code>.
     */
    public final TableField<PolicyRecord, Integer> MAXIMUM_LEVEL_ACCEPT = createField(DSL.name("maximum_level_accept"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>human_resource_management.policy.policy_status</code>.
     */
    public final TableField<PolicyRecord, Boolean> POLICY_STATUS = createField(DSL.name("policy_status"), SQLDataType.BIT, this, "");

    /**
     * The column <code>human_resource_management.policy.created_date</code>.
     */
    public final TableField<PolicyRecord, LocalDate> CREATED_DATE = createField(DSL.name("created_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>human_resource_management.policy.policy_type_id</code>.
     */
    public final TableField<PolicyRecord, Long> POLICY_TYPE_ID = createField(DSL.name("policy_type_id"), SQLDataType.BIGINT, this, "");

    private Policy(Name alias, Table<PolicyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Policy(Name alias, Table<PolicyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>human_resource_management.policy</code> table
     * reference
     */
    public Policy(String alias) {
        this(DSL.name(alias), POLICY);
    }

    /**
     * Create an aliased <code>human_resource_management.policy</code> table
     * reference
     */
    public Policy(Name alias) {
        this(alias, POLICY);
    }

    /**
     * Create a <code>human_resource_management.policy</code> table reference
     */
    public Policy() {
        this(DSL.name("policy"), null);
    }

    public <O extends Record> Policy(Table<O> child, ForeignKey<O, PolicyRecord> key) {
        super(child, key, POLICY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : HumanResourceManagement.HUMAN_RESOURCE_MANAGEMENT;
    }

    @Override
    public UniqueKey<PolicyRecord> getPrimaryKey() {
        return Keys.KEY_POLICY_PRIMARY;
    }

    @Override
    public List<ForeignKey<PolicyRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKO1XJITAH0I8U19U5380O7382W);
    }

    private transient PolicyType _policyType;

    /**
     * Get the implicit join path to the
     * <code>human_resource_management.policy_type</code> table.
     */
    public PolicyType policyType() {
        if (_policyType == null)
            _policyType = new PolicyType(this, Keys.FKO1XJITAH0I8U19U5380O7382W);

        return _policyType;
    }

    @Override
    public Policy as(String alias) {
        return new Policy(DSL.name(alias), this);
    }

    @Override
    public Policy as(Name alias) {
        return new Policy(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Policy rename(String name) {
        return new Policy(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Policy rename(Name name) {
        return new Policy(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, String, String, LocalDate, Integer, Boolean, LocalDate, Long> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}

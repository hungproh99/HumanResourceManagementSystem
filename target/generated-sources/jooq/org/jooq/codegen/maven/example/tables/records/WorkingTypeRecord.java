/*
 * This file is generated by jOOQ.
 */
package org.jooq.codegen.maven.example.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.codegen.maven.example.tables.WorkingType;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WorkingTypeRecord extends UpdatableRecordImpl<WorkingTypeRecord> implements Record3<Long, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>human_resource_management.working_type.type_id</code>.
     */
    public WorkingTypeRecord setTypeId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>human_resource_management.working_type.type_id</code>.
     */
    public Long getTypeId() {
        return (Long) get(0);
    }

    /**
     * Setter for
     * <code>human_resource_management.working_type.description</code>.
     */
    public WorkingTypeRecord setDescription(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for
     * <code>human_resource_management.working_type.description</code>.
     */
    public String getDescription() {
        return (String) get(1);
    }

    /**
     * Setter for <code>human_resource_management.working_type.name</code>.
     */
    public WorkingTypeRecord setName(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>human_resource_management.working_type.name</code>.
     */
    public String getName() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return WorkingType.WORKING_TYPE.TYPE_ID;
    }

    @Override
    public Field<String> field2() {
        return WorkingType.WORKING_TYPE.DESCRIPTION;
    }

    @Override
    public Field<String> field3() {
        return WorkingType.WORKING_TYPE.NAME;
    }

    @Override
    public Long component1() {
        return getTypeId();
    }

    @Override
    public String component2() {
        return getDescription();
    }

    @Override
    public String component3() {
        return getName();
    }

    @Override
    public Long value1() {
        return getTypeId();
    }

    @Override
    public String value2() {
        return getDescription();
    }

    @Override
    public String value3() {
        return getName();
    }

    @Override
    public WorkingTypeRecord value1(Long value) {
        setTypeId(value);
        return this;
    }

    @Override
    public WorkingTypeRecord value2(String value) {
        setDescription(value);
        return this;
    }

    @Override
    public WorkingTypeRecord value3(String value) {
        setName(value);
        return this;
    }

    @Override
    public WorkingTypeRecord values(Long value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached WorkingTypeRecord
     */
    public WorkingTypeRecord() {
        super(WorkingType.WORKING_TYPE);
    }

    /**
     * Create a detached, initialised WorkingTypeRecord
     */
    public WorkingTypeRecord(Long typeId, String description, String name) {
        super(WorkingType.WORKING_TYPE);

        setTypeId(typeId);
        setDescription(description);
        setName(name);
    }

    /**
     * Create a detached, initialised WorkingTypeRecord
     */
    public WorkingTypeRecord(org.jooq.codegen.maven.example.tables.pojos.WorkingType value) {
        super(WorkingType.WORKING_TYPE);

        if (value != null) {
            setTypeId(value.getTypeId());
            setDescription(value.getDescription());
            setName(value.getName());
        }
    }
}

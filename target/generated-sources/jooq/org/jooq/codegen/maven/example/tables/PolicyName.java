/*
 * This file is generated by jOOQ.
 */
package org.jooq.codegen.maven.example.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.codegen.maven.example.HumanResourceManagement;
import org.jooq.codegen.maven.example.Keys;
import org.jooq.codegen.maven.example.tables.records.PolicyNameRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PolicyName extends TableImpl<PolicyNameRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>human_resource_management.policy_name</code>
     */
    public static final PolicyName POLICY_NAME = new PolicyName();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PolicyNameRecord> getRecordType() {
        return PolicyNameRecord.class;
    }

    /**
     * The column
     * <code>human_resource_management.policy_name.policy_name_id</code>.
     */
    public final TableField<PolicyNameRecord, Long> POLICY_NAME_ID = createField(DSL.name("policy_name_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column
     * <code>human_resource_management.policy_name.policy_name</code>.
     */
    public final TableField<PolicyNameRecord, String> POLICY_NAME_ = createField(DSL.name("policy_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>human_resource_management.policy_name.policy_type_id</code>.
     */
    public final TableField<PolicyNameRecord, Long> POLICY_TYPE_ID = createField(DSL.name("policy_type_id"), SQLDataType.BIGINT, this, "");

    private PolicyName(Name alias, Table<PolicyNameRecord> aliased) {
        this(alias, aliased, null);
    }

    private PolicyName(Name alias, Table<PolicyNameRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>human_resource_management.policy_name</code>
     * table reference
     */
    public PolicyName(String alias) {
        this(DSL.name(alias), POLICY_NAME);
    }

    /**
     * Create an aliased <code>human_resource_management.policy_name</code>
     * table reference
     */
    public PolicyName(Name alias) {
        this(alias, POLICY_NAME);
    }

    /**
     * Create a <code>human_resource_management.policy_name</code> table
     * reference
     */
    public PolicyName() {
        this(DSL.name("policy_name"), null);
    }

    public <O extends Record> PolicyName(Table<O> child, ForeignKey<O, PolicyNameRecord> key) {
        super(child, key, POLICY_NAME);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : HumanResourceManagement.HUMAN_RESOURCE_MANAGEMENT;
    }

    @Override
    public Identity<PolicyNameRecord, Long> getIdentity() {
        return (Identity<PolicyNameRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PolicyNameRecord> getPrimaryKey() {
        return Keys.KEY_POLICY_NAME_PRIMARY;
    }

    @Override
    public List<ForeignKey<PolicyNameRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK7NMLSQ2HYE4CML0867QKLYBNT);
    }

    private transient PolicyType _policyType;

    /**
     * Get the implicit join path to the
     * <code>human_resource_management.policy_type</code> table.
     */
    public PolicyType policyType() {
        if (_policyType == null)
            _policyType = new PolicyType(this, Keys.FK7NMLSQ2HYE4CML0867QKLYBNT);

        return _policyType;
    }

    @Override
    public PolicyName as(String alias) {
        return new PolicyName(DSL.name(alias), this);
    }

    @Override
    public PolicyName as(Name alias) {
        return new PolicyName(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PolicyName rename(String name) {
        return new PolicyName(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PolicyName rename(Name name) {
        return new PolicyName(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}

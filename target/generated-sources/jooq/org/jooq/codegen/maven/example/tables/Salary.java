/*
 * This file is generated by jOOQ.
 */
package org.jooq.codegen.maven.example.tables;


import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.codegen.maven.example.HumanResourceManagement;
import org.jooq.codegen.maven.example.Keys;
import org.jooq.codegen.maven.example.tables.records.SalaryRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Salary extends TableImpl<SalaryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>human_resource_management.salary</code>
     */
    public static final Salary SALARY = new Salary();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SalaryRecord> getRecordType() {
        return SalaryRecord.class;
    }

    /**
     * The column <code>human_resource_management.salary.laudatory_id</code>.
     */
    public final TableField<SalaryRecord, Long> LAUDATORY_ID = createField(DSL.name("laudatory_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>human_resource_management.salary.end_date</code>.
     */
    public final TableField<SalaryRecord, LocalDate> END_DATE = createField(DSL.name("end_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>human_resource_management.salary.final_salary</code>.
     */
    public final TableField<SalaryRecord, BigDecimal> FINAL_SALARY = createField(DSL.name("final_salary"), SQLDataType.DECIMAL(19, 2), this, "");

    /**
     * The column <code>human_resource_management.salary.start_date</code>.
     */
    public final TableField<SalaryRecord, LocalDate> START_DATE = createField(DSL.name("start_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>human_resource_management.salary.subsidize</code>.
     */
    public final TableField<SalaryRecord, BigDecimal> SUBSIDIZE = createField(DSL.name("subsidize"), SQLDataType.DECIMAL(19, 2), this, "");

    /**
     * The column
     * <code>human_resource_management.salary.working_information_id</code>.
     */
    public final TableField<SalaryRecord, Long> WORKING_INFORMATION_ID = createField(DSL.name("working_information_id"), SQLDataType.BIGINT, this, "");

    private Salary(Name alias, Table<SalaryRecord> aliased) {
        this(alias, aliased, null);
    }

    private Salary(Name alias, Table<SalaryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>human_resource_management.salary</code> table
     * reference
     */
    public Salary(String alias) {
        this(DSL.name(alias), SALARY);
    }

    /**
     * Create an aliased <code>human_resource_management.salary</code> table
     * reference
     */
    public Salary(Name alias) {
        this(alias, SALARY);
    }

    /**
     * Create a <code>human_resource_management.salary</code> table reference
     */
    public Salary() {
        this(DSL.name("salary"), null);
    }

    public <O extends Record> Salary(Table<O> child, ForeignKey<O, SalaryRecord> key) {
        super(child, key, SALARY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : HumanResourceManagement.HUMAN_RESOURCE_MANAGEMENT;
    }

    @Override
    public Identity<SalaryRecord, Long> getIdentity() {
        return (Identity<SalaryRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<SalaryRecord> getPrimaryKey() {
        return Keys.KEY_SALARY_PRIMARY;
    }

    @Override
    public List<ForeignKey<SalaryRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKCUFGQT5JE8SAVK7883DU8YJL9);
    }

    private transient WorkingInformation _workingInformation;

    /**
     * Get the implicit join path to the
     * <code>human_resource_management.working_information</code> table.
     */
    public WorkingInformation workingInformation() {
        if (_workingInformation == null)
            _workingInformation = new WorkingInformation(this, Keys.FKCUFGQT5JE8SAVK7883DU8YJL9);

        return _workingInformation;
    }

    @Override
    public Salary as(String alias) {
        return new Salary(DSL.name(alias), this);
    }

    @Override
    public Salary as(Name alias) {
        return new Salary(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Salary rename(String name) {
        return new Salary(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Salary rename(Name name) {
        return new Salary(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, LocalDate, BigDecimal, LocalDate, BigDecimal, Long> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}

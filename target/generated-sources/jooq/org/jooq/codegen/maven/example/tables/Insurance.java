/*
 * This file is generated by jOOQ.
 */
package org.jooq.codegen.maven.example.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.codegen.maven.example.HumanResourceManagement;
import org.jooq.codegen.maven.example.Keys;
import org.jooq.codegen.maven.example.tables.records.InsuranceRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Insurance extends TableImpl<InsuranceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>human_resource_management.insurance</code>
     */
    public static final Insurance INSURANCE = new Insurance();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InsuranceRecord> getRecordType() {
        return InsuranceRecord.class;
    }

    /**
     * The column <code>human_resource_management.insurance.insurance_id</code>.
     */
    public final TableField<InsuranceRecord, Long> INSURANCE_ID = createField(DSL.name("insurance_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>human_resource_management.insurance.description</code>.
     */
    public final TableField<InsuranceRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>human_resource_management.insurance.insurance_name</code>.
     */
    public final TableField<InsuranceRecord, String> INSURANCE_NAME = createField(DSL.name("insurance_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>human_resource_management.insurance.percent</code>.
     */
    public final TableField<InsuranceRecord, String> PERCENT = createField(DSL.name("percent"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>human_resource_management.insurance.title</code>.
     */
    public final TableField<InsuranceRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>human_resource_management.insurance.employee_id</code>.
     */
    public final TableField<InsuranceRecord, String> EMPLOYEE_ID = createField(DSL.name("employee_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>human_resource_management.insurance.address</code>.
     */
    public final TableField<InsuranceRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR(255), this, "");

    private Insurance(Name alias, Table<InsuranceRecord> aliased) {
        this(alias, aliased, null);
    }

    private Insurance(Name alias, Table<InsuranceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>human_resource_management.insurance</code> table
     * reference
     */
    public Insurance(String alias) {
        this(DSL.name(alias), INSURANCE);
    }

    /**
     * Create an aliased <code>human_resource_management.insurance</code> table
     * reference
     */
    public Insurance(Name alias) {
        this(alias, INSURANCE);
    }

    /**
     * Create a <code>human_resource_management.insurance</code> table reference
     */
    public Insurance() {
        this(DSL.name("insurance"), null);
    }

    public <O extends Record> Insurance(Table<O> child, ForeignKey<O, InsuranceRecord> key) {
        super(child, key, INSURANCE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : HumanResourceManagement.HUMAN_RESOURCE_MANAGEMENT;
    }

    @Override
    public Identity<InsuranceRecord, Long> getIdentity() {
        return (Identity<InsuranceRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<InsuranceRecord> getPrimaryKey() {
        return Keys.KEY_INSURANCE_PRIMARY;
    }

    @Override
    public List<ForeignKey<InsuranceRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKKC01GEQP8O69WKJ996142PJT);
    }

    private transient Employee _employee;

    /**
     * Get the implicit join path to the
     * <code>human_resource_management.employee</code> table.
     */
    public Employee employee() {
        if (_employee == null)
            _employee = new Employee(this, Keys.FKKC01GEQP8O69WKJ996142PJT);

        return _employee;
    }

    @Override
    public Insurance as(String alias) {
        return new Insurance(DSL.name(alias), this);
    }

    @Override
    public Insurance as(Name alias) {
        return new Insurance(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Insurance rename(String name) {
        return new Insurance(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Insurance rename(Name name) {
        return new Insurance(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, String, String, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}

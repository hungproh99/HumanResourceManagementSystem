/*
 * This file is generated by jOOQ.
 */
package org.jooq.codegen.maven.example.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.codegen.maven.example.HumanResourceManagement;
import org.jooq.codegen.maven.example.Indexes;
import org.jooq.codegen.maven.example.Keys;
import org.jooq.codegen.maven.example.tables.records.EmployeeAllowanceRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EmployeeAllowance extends TableImpl<EmployeeAllowanceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>human_resource_management.employee_allowance</code>
     */
    public static final EmployeeAllowance EMPLOYEE_ALLOWANCE = new EmployeeAllowance();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmployeeAllowanceRecord> getRecordType() {
        return EmployeeAllowanceRecord.class;
    }

    /**
     * The column
     * <code>human_resource_management.employee_allowance.employee_allowance_id</code>.
     */
    public final TableField<EmployeeAllowanceRecord, Long> EMPLOYEE_ALLOWANCE_ID = createField(DSL.name("employee_allowance_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column
     * <code>human_resource_management.employee_allowance.allowance_status</code>.
     */
    public final TableField<EmployeeAllowanceRecord, Boolean> ALLOWANCE_STATUS = createField(DSL.name("allowance_status"), SQLDataType.BIT, this, "");

    /**
     * The column
     * <code>human_resource_management.employee_allowance.employee_id</code>.
     */
    public final TableField<EmployeeAllowanceRecord, String> EMPLOYEE_ID = createField(DSL.name("employee_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>human_resource_management.employee_allowance.policy_name_id</code>.
     */
    public final TableField<EmployeeAllowanceRecord, Long> POLICY_NAME_ID = createField(DSL.name("policy_name_id"), SQLDataType.BIGINT, this, "");

    private EmployeeAllowance(Name alias, Table<EmployeeAllowanceRecord> aliased) {
        this(alias, aliased, null);
    }

    private EmployeeAllowance(Name alias, Table<EmployeeAllowanceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>human_resource_management.employee_allowance</code> table reference
     */
    public EmployeeAllowance(String alias) {
        this(DSL.name(alias), EMPLOYEE_ALLOWANCE);
    }

    /**
     * Create an aliased
     * <code>human_resource_management.employee_allowance</code> table reference
     */
    public EmployeeAllowance(Name alias) {
        this(alias, EMPLOYEE_ALLOWANCE);
    }

    /**
     * Create a <code>human_resource_management.employee_allowance</code> table
     * reference
     */
    public EmployeeAllowance() {
        this(DSL.name("employee_allowance"), null);
    }

    public <O extends Record> EmployeeAllowance(Table<O> child, ForeignKey<O, EmployeeAllowanceRecord> key) {
        super(child, key, EMPLOYEE_ALLOWANCE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : HumanResourceManagement.HUMAN_RESOURCE_MANAGEMENT;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.EMPLOYEE_ALLOWANCE_FK293UXH1JV018U13M3F2JUWFEA_IDX);
    }

    @Override
    public Identity<EmployeeAllowanceRecord, Long> getIdentity() {
        return (Identity<EmployeeAllowanceRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<EmployeeAllowanceRecord> getPrimaryKey() {
        return Keys.KEY_EMPLOYEE_ALLOWANCE_PRIMARY;
    }

    @Override
    public List<ForeignKey<EmployeeAllowanceRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK293UXH1JV018U13M3F2JUWFEA, Keys.FKOSQIBKMQX7OCSYRBSEHVNY87M);
    }

    private transient Employee _employee;
    private transient PolicyName _policyName;

    /**
     * Get the implicit join path to the
     * <code>human_resource_management.employee</code> table.
     */
    public Employee employee() {
        if (_employee == null)
            _employee = new Employee(this, Keys.FK293UXH1JV018U13M3F2JUWFEA);

        return _employee;
    }

    /**
     * Get the implicit join path to the
     * <code>human_resource_management.policy_name</code> table.
     */
    public PolicyName policyName() {
        if (_policyName == null)
            _policyName = new PolicyName(this, Keys.FKOSQIBKMQX7OCSYRBSEHVNY87M);

        return _policyName;
    }

    @Override
    public EmployeeAllowance as(String alias) {
        return new EmployeeAllowance(DSL.name(alias), this);
    }

    @Override
    public EmployeeAllowance as(Name alias) {
        return new EmployeeAllowance(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EmployeeAllowance rename(String name) {
        return new EmployeeAllowance(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EmployeeAllowance rename(Name name) {
        return new EmployeeAllowance(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Boolean, String, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}

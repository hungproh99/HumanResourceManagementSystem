/*
 * This file is generated by jOOQ.
 */
package org.jooq.codegen.maven.example.tables;


import java.time.LocalTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.codegen.maven.example.HumanResourceManagement;
import org.jooq.codegen.maven.example.Keys;
import org.jooq.codegen.maven.example.tables.records.OvertimeRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Overtime extends TableImpl<OvertimeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>human_resource_management.overtime</code>
     */
    public static final Overtime OVERTIME = new Overtime();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OvertimeRecord> getRecordType() {
        return OvertimeRecord.class;
    }

    /**
     * The column <code>human_resource_management.overtime.overtime_id</code>.
     */
    public final TableField<OvertimeRecord, Long> OVERTIME_ID = createField(DSL.name("overtime_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>human_resource_management.overtime.end_time</code>.
     */
    public final TableField<OvertimeRecord, LocalTime> END_TIME = createField(DSL.name("end_time"), SQLDataType.LOCALTIME, this, "");

    /**
     * The column <code>human_resource_management.overtime.start_time</code>.
     */
    public final TableField<OvertimeRecord, LocalTime> START_TIME = createField(DSL.name("start_time"), SQLDataType.LOCALTIME, this, "");

    /**
     * The column
     * <code>human_resource_management.overtime.overtime_type_id</code>.
     */
    public final TableField<OvertimeRecord, Long> OVERTIME_TYPE_ID = createField(DSL.name("overtime_type_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>human_resource_management.overtime.timekeeping_id</code>.
     */
    public final TableField<OvertimeRecord, Long> TIMEKEEPING_ID = createField(DSL.name("timekeeping_id"), SQLDataType.BIGINT, this, "");

    private Overtime(Name alias, Table<OvertimeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Overtime(Name alias, Table<OvertimeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>human_resource_management.overtime</code> table
     * reference
     */
    public Overtime(String alias) {
        this(DSL.name(alias), OVERTIME);
    }

    /**
     * Create an aliased <code>human_resource_management.overtime</code> table
     * reference
     */
    public Overtime(Name alias) {
        this(alias, OVERTIME);
    }

    /**
     * Create a <code>human_resource_management.overtime</code> table reference
     */
    public Overtime() {
        this(DSL.name("overtime"), null);
    }

    public <O extends Record> Overtime(Table<O> child, ForeignKey<O, OvertimeRecord> key) {
        super(child, key, OVERTIME);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : HumanResourceManagement.HUMAN_RESOURCE_MANAGEMENT;
    }

    @Override
    public Identity<OvertimeRecord, Long> getIdentity() {
        return (Identity<OvertimeRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<OvertimeRecord> getPrimaryKey() {
        return Keys.KEY_OVERTIME_PRIMARY;
    }

    @Override
    public List<ForeignKey<OvertimeRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKQL0MY2O5RBWGF9POH5HHQDVD2, Keys.FKAASBKWOHKW74LJY7T58MJ8VCA);
    }

    private transient OvertimeType _overtimeType;
    private transient Timekeeping _timekeeping;

    /**
     * Get the implicit join path to the
     * <code>human_resource_management.overtime_type</code> table.
     */
    public OvertimeType overtimeType() {
        if (_overtimeType == null)
            _overtimeType = new OvertimeType(this, Keys.FKQL0MY2O5RBWGF9POH5HHQDVD2);

        return _overtimeType;
    }

    /**
     * Get the implicit join path to the
     * <code>human_resource_management.timekeeping</code> table.
     */
    public Timekeeping timekeeping() {
        if (_timekeeping == null)
            _timekeeping = new Timekeeping(this, Keys.FKAASBKWOHKW74LJY7T58MJ8VCA);

        return _timekeeping;
    }

    @Override
    public Overtime as(String alias) {
        return new Overtime(DSL.name(alias), this);
    }

    @Override
    public Overtime as(Name alias) {
        return new Overtime(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Overtime rename(String name) {
        return new Overtime(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Overtime rename(Name name) {
        return new Overtime(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, LocalTime, LocalTime, Long, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}

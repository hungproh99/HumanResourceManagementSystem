/*
 * This file is generated by jOOQ.
 */
package org.jooq.codegen.maven.example.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.codegen.maven.example.HumanResourceManagement;
import org.jooq.codegen.maven.example.Keys;
import org.jooq.codegen.maven.example.tables.records.WorkingTypeRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WorkingType extends TableImpl<WorkingTypeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>human_resource_management.working_type</code>
     */
    public static final WorkingType WORKING_TYPE = new WorkingType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WorkingTypeRecord> getRecordType() {
        return WorkingTypeRecord.class;
    }

    /**
     * The column <code>human_resource_management.working_type.type_id</code>.
     */
    public final TableField<WorkingTypeRecord, Long> TYPE_ID = createField(DSL.name("type_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column
     * <code>human_resource_management.working_type.description</code>.
     */
    public final TableField<WorkingTypeRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>human_resource_management.working_type.name</code>.
     */
    public final TableField<WorkingTypeRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    private WorkingType(Name alias, Table<WorkingTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private WorkingType(Name alias, Table<WorkingTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>human_resource_management.working_type</code>
     * table reference
     */
    public WorkingType(String alias) {
        this(DSL.name(alias), WORKING_TYPE);
    }

    /**
     * Create an aliased <code>human_resource_management.working_type</code>
     * table reference
     */
    public WorkingType(Name alias) {
        this(alias, WORKING_TYPE);
    }

    /**
     * Create a <code>human_resource_management.working_type</code> table
     * reference
     */
    public WorkingType() {
        this(DSL.name("working_type"), null);
    }

    public <O extends Record> WorkingType(Table<O> child, ForeignKey<O, WorkingTypeRecord> key) {
        super(child, key, WORKING_TYPE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : HumanResourceManagement.HUMAN_RESOURCE_MANAGEMENT;
    }

    @Override
    public Identity<WorkingTypeRecord, Long> getIdentity() {
        return (Identity<WorkingTypeRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<WorkingTypeRecord> getPrimaryKey() {
        return Keys.KEY_WORKING_TYPE_PRIMARY;
    }

    @Override
    public WorkingType as(String alias) {
        return new WorkingType(DSL.name(alias), this);
    }

    @Override
    public WorkingType as(Name alias) {
        return new WorkingType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkingType rename(String name) {
        return new WorkingType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkingType rename(Name name) {
        return new WorkingType(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}

/*
 * This file is generated by jOOQ.
 */
package org.jooq.codegen.maven.example.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.codegen.maven.example.HumanResourceManagement;
import org.jooq.codegen.maven.example.Keys;
import org.jooq.codegen.maven.example.tables.records.DisciplineRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Discipline extends TableImpl<DisciplineRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>human_resource_management.discipline</code>
     */
    public static final Discipline DISCIPLINE = new Discipline();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DisciplineRecord> getRecordType() {
        return DisciplineRecord.class;
    }

    /**
     * The column
     * <code>human_resource_management.discipline.discipline_id</code>.
     */
    public final TableField<DisciplineRecord, Long> DISCIPLINE_ID = createField(DSL.name("discipline_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>human_resource_management.discipline.date</code>.
     */
    public final TableField<DisciplineRecord, String> DATE = createField(DSL.name("date"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>human_resource_management.discipline.description</code>.
     */
    public final TableField<DisciplineRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>human_resource_management.discipline.punishment</code>.
     */
    public final TableField<DisciplineRecord, String> PUNISHMENT = createField(DSL.name("punishment"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>human_resource_management.discipline.status</code>.
     */
    public final TableField<DisciplineRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>human_resource_management.discipline.title</code>.
     */
    public final TableField<DisciplineRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>human_resource_management.discipline.type_id</code>.
     */
    public final TableField<DisciplineRecord, Long> TYPE_ID = createField(DSL.name("type_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>human_resource_management.discipline.working_information_id</code>.
     */
    public final TableField<DisciplineRecord, Long> WORKING_INFORMATION_ID = createField(DSL.name("working_information_id"), SQLDataType.BIGINT, this, "");

    private Discipline(Name alias, Table<DisciplineRecord> aliased) {
        this(alias, aliased, null);
    }

    private Discipline(Name alias, Table<DisciplineRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>human_resource_management.discipline</code> table
     * reference
     */
    public Discipline(String alias) {
        this(DSL.name(alias), DISCIPLINE);
    }

    /**
     * Create an aliased <code>human_resource_management.discipline</code> table
     * reference
     */
    public Discipline(Name alias) {
        this(alias, DISCIPLINE);
    }

    /**
     * Create a <code>human_resource_management.discipline</code> table
     * reference
     */
    public Discipline() {
        this(DSL.name("discipline"), null);
    }

    public <O extends Record> Discipline(Table<O> child, ForeignKey<O, DisciplineRecord> key) {
        super(child, key, DISCIPLINE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : HumanResourceManagement.HUMAN_RESOURCE_MANAGEMENT;
    }

    @Override
    public UniqueKey<DisciplineRecord> getPrimaryKey() {
        return Keys.KEY_DISCIPLINE_PRIMARY;
    }

    @Override
    public List<ForeignKey<DisciplineRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK7PA865HYRHP12FLJB3RQH7H28, Keys.FKHROLHRW5RULTA6U6UJYJULY0X);
    }

    private transient DisciplineType _disciplineType;
    private transient WorkingInformation _workingInformation;

    /**
     * Get the implicit join path to the
     * <code>human_resource_management.discipline_type</code> table.
     */
    public DisciplineType disciplineType() {
        if (_disciplineType == null)
            _disciplineType = new DisciplineType(this, Keys.FK7PA865HYRHP12FLJB3RQH7H28);

        return _disciplineType;
    }

    /**
     * Get the implicit join path to the
     * <code>human_resource_management.working_information</code> table.
     */
    public WorkingInformation workingInformation() {
        if (_workingInformation == null)
            _workingInformation = new WorkingInformation(this, Keys.FKHROLHRW5RULTA6U6UJYJULY0X);

        return _workingInformation;
    }

    @Override
    public Discipline as(String alias) {
        return new Discipline(DSL.name(alias), this);
    }

    @Override
    public Discipline as(Name alias) {
        return new Discipline(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Discipline rename(String name) {
        return new Discipline(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Discipline rename(Name name) {
        return new Discipline(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, String, String, String, String, String, Long, Long> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}

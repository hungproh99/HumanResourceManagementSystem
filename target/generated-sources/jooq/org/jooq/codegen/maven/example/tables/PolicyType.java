/*
 * This file is generated by jOOQ.
 */
package org.jooq.codegen.maven.example.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.codegen.maven.example.HumanResourceManagement;
import org.jooq.codegen.maven.example.Keys;
import org.jooq.codegen.maven.example.tables.records.PolicyTypeRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PolicyType extends TableImpl<PolicyTypeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>human_resource_management.policy_type</code>
     */
    public static final PolicyType POLICY_TYPE = new PolicyType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PolicyTypeRecord> getRecordType() {
        return PolicyTypeRecord.class;
    }

    /**
     * The column
     * <code>human_resource_management.policy_type.policy_type_id</code>.
     */
    public final TableField<PolicyTypeRecord, Long> POLICY_TYPE_ID = createField(DSL.name("policy_type_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column
     * <code>human_resource_management.policy_type.policy_type</code>.
     */
    public final TableField<PolicyTypeRecord, String> POLICY_TYPE_ = createField(DSL.name("policy_type"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>human_resource_management.policy_type.policy_category_id</code>.
     */
    public final TableField<PolicyTypeRecord, Long> POLICY_CATEGORY_ID = createField(DSL.name("policy_category_id"), SQLDataType.BIGINT, this, "");

    private PolicyType(Name alias, Table<PolicyTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private PolicyType(Name alias, Table<PolicyTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>human_resource_management.policy_type</code>
     * table reference
     */
    public PolicyType(String alias) {
        this(DSL.name(alias), POLICY_TYPE);
    }

    /**
     * Create an aliased <code>human_resource_management.policy_type</code>
     * table reference
     */
    public PolicyType(Name alias) {
        this(alias, POLICY_TYPE);
    }

    /**
     * Create a <code>human_resource_management.policy_type</code> table
     * reference
     */
    public PolicyType() {
        this(DSL.name("policy_type"), null);
    }

    public <O extends Record> PolicyType(Table<O> child, ForeignKey<O, PolicyTypeRecord> key) {
        super(child, key, POLICY_TYPE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : HumanResourceManagement.HUMAN_RESOURCE_MANAGEMENT;
    }

    @Override
    public Identity<PolicyTypeRecord, Long> getIdentity() {
        return (Identity<PolicyTypeRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PolicyTypeRecord> getPrimaryKey() {
        return Keys.KEY_POLICY_TYPE_PRIMARY;
    }

    @Override
    public List<ForeignKey<PolicyTypeRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKM3NA80O96I7KXD7UII2TVWWS7);
    }

    private transient PolicyCategory _policyCategory;

    /**
     * Get the implicit join path to the
     * <code>human_resource_management.policy_category</code> table.
     */
    public PolicyCategory policyCategory() {
        if (_policyCategory == null)
            _policyCategory = new PolicyCategory(this, Keys.FKM3NA80O96I7KXD7UII2TVWWS7);

        return _policyCategory;
    }

    @Override
    public PolicyType as(String alias) {
        return new PolicyType(DSL.name(alias), this);
    }

    @Override
    public PolicyType as(Name alias) {
        return new PolicyType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PolicyType rename(String name) {
        return new PolicyType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PolicyType rename(Name name) {
        return new PolicyType(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}

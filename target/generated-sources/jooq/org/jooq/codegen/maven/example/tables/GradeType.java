/*
 * This file is generated by jOOQ.
 */
package org.jooq.codegen.maven.example.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.codegen.maven.example.HumanResourceManagement;
import org.jooq.codegen.maven.example.Keys;
import org.jooq.codegen.maven.example.tables.records.GradeTypeRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GradeType extends TableImpl<GradeTypeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>human_resource_management.grade_type</code>
     */
    public static final GradeType GRADE_TYPE = new GradeType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GradeTypeRecord> getRecordType() {
        return GradeTypeRecord.class;
    }

    /**
     * The column <code>human_resource_management.grade_type.grade_id</code>.
     */
    public final TableField<GradeTypeRecord, Long> GRADE_ID = createField(DSL.name("grade_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>human_resource_management.grade_type.description</code>.
     */
    public final TableField<GradeTypeRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>human_resource_management.grade_type.name</code>.
     */
    public final TableField<GradeTypeRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>human_resource_management.grade_type.job_id</code>.
     */
    public final TableField<GradeTypeRecord, Long> JOB_ID = createField(DSL.name("job_id"), SQLDataType.BIGINT, this, "");

    private GradeType(Name alias, Table<GradeTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private GradeType(Name alias, Table<GradeTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>human_resource_management.grade_type</code> table
     * reference
     */
    public GradeType(String alias) {
        this(DSL.name(alias), GRADE_TYPE);
    }

    /**
     * Create an aliased <code>human_resource_management.grade_type</code> table
     * reference
     */
    public GradeType(Name alias) {
        this(alias, GRADE_TYPE);
    }

    /**
     * Create a <code>human_resource_management.grade_type</code> table
     * reference
     */
    public GradeType() {
        this(DSL.name("grade_type"), null);
    }

    public <O extends Record> GradeType(Table<O> child, ForeignKey<O, GradeTypeRecord> key) {
        super(child, key, GRADE_TYPE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : HumanResourceManagement.HUMAN_RESOURCE_MANAGEMENT;
    }

    @Override
    public Identity<GradeTypeRecord, Long> getIdentity() {
        return (Identity<GradeTypeRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<GradeTypeRecord> getPrimaryKey() {
        return Keys.KEY_GRADE_TYPE_PRIMARY;
    }

    @Override
    public List<ForeignKey<GradeTypeRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKOQCA98T9L3HWPI1LPMRINK6G3);
    }

    private transient Job _job;

    /**
     * Get the implicit join path to the
     * <code>human_resource_management.job</code> table.
     */
    public Job job() {
        if (_job == null)
            _job = new Job(this, Keys.FKOQCA98T9L3HWPI1LPMRINK6G3);

        return _job;
    }

    @Override
    public GradeType as(String alias) {
        return new GradeType(DSL.name(alias), this);
    }

    @Override
    public GradeType as(Name alias) {
        return new GradeType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public GradeType rename(String name) {
        return new GradeType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GradeType rename(Name name) {
        return new GradeType(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}

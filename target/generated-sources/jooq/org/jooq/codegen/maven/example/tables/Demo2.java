/*
 * This file is generated by jOOQ.
 */
package org.jooq.codegen.maven.example.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.codegen.maven.example.HumanResourceManagement;
import org.jooq.codegen.maven.example.Keys;
import org.jooq.codegen.maven.example.tables.records.Demo2Record;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Demo2 extends TableImpl<Demo2Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>human_resource_management.demo2</code>
     */
    public static final Demo2 DEMO2 = new Demo2();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Demo2Record> getRecordType() {
        return Demo2Record.class;
    }

    /**
     * The column <code>human_resource_management.demo2.id</code>.
     */
    public final TableField<Demo2Record, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    private Demo2(Name alias, Table<Demo2Record> aliased) {
        this(alias, aliased, null);
    }

    private Demo2(Name alias, Table<Demo2Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>human_resource_management.demo2</code> table
     * reference
     */
    public Demo2(String alias) {
        this(DSL.name(alias), DEMO2);
    }

    /**
     * Create an aliased <code>human_resource_management.demo2</code> table
     * reference
     */
    public Demo2(Name alias) {
        this(alias, DEMO2);
    }

    /**
     * Create a <code>human_resource_management.demo2</code> table reference
     */
    public Demo2() {
        this(DSL.name("demo2"), null);
    }

    public <O extends Record> Demo2(Table<O> child, ForeignKey<O, Demo2Record> key) {
        super(child, key, DEMO2);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : HumanResourceManagement.HUMAN_RESOURCE_MANAGEMENT;
    }

    @Override
    public UniqueKey<Demo2Record> getPrimaryKey() {
        return Keys.KEY_DEMO2_PRIMARY;
    }

    @Override
    public Demo2 as(String alias) {
        return new Demo2(DSL.name(alias), this);
    }

    @Override
    public Demo2 as(Name alias) {
        return new Demo2(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Demo2 rename(String name) {
        return new Demo2(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Demo2 rename(Name name) {
        return new Demo2(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<Long> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}

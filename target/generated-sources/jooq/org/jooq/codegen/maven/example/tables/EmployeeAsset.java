/*
 * This file is generated by jOOQ.
 */
package org.jooq.codegen.maven.example.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.codegen.maven.example.HumanResourceManagement;
import org.jooq.codegen.maven.example.Keys;
import org.jooq.codegen.maven.example.tables.records.EmployeeAssetRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EmployeeAsset extends TableImpl<EmployeeAssetRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>human_resource_management.employee_asset</code>
     */
    public static final EmployeeAsset EMPLOYEE_ASSET = new EmployeeAsset();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmployeeAssetRecord> getRecordType() {
        return EmployeeAssetRecord.class;
    }

    /**
     * The column
     * <code>human_resource_management.employee_asset.employee_asset_id</code>.
     */
    public final TableField<EmployeeAssetRecord, Long> EMPLOYEE_ASSET_ID = createField(DSL.name("employee_asset_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column
     * <code>human_resource_management.employee_asset.borrow_date</code>.
     */
    public final TableField<EmployeeAssetRecord, LocalDate> BORROW_DATE = createField(DSL.name("borrow_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column
     * <code>human_resource_management.employee_asset.description</code>.
     */
    public final TableField<EmployeeAssetRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>human_resource_management.employee_asset.quantity</code>.
     */
    public final TableField<EmployeeAssetRecord, Integer> QUANTITY = createField(DSL.name("quantity"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>human_resource_management.employee_asset.return_date</code>.
     */
    public final TableField<EmployeeAssetRecord, LocalDate> RETURN_DATE = createField(DSL.name("return_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>human_resource_management.employee_asset.status</code>.
     */
    public final TableField<EmployeeAssetRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>human_resource_management.employee_asset.category_asset_id</code>.
     */
    public final TableField<EmployeeAssetRecord, Long> CATEGORY_ASSET_ID = createField(DSL.name("category_asset_id"), SQLDataType.BIGINT, this, "");

    private EmployeeAsset(Name alias, Table<EmployeeAssetRecord> aliased) {
        this(alias, aliased, null);
    }

    private EmployeeAsset(Name alias, Table<EmployeeAssetRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>human_resource_management.employee_asset</code>
     * table reference
     */
    public EmployeeAsset(String alias) {
        this(DSL.name(alias), EMPLOYEE_ASSET);
    }

    /**
     * Create an aliased <code>human_resource_management.employee_asset</code>
     * table reference
     */
    public EmployeeAsset(Name alias) {
        this(alias, EMPLOYEE_ASSET);
    }

    /**
     * Create a <code>human_resource_management.employee_asset</code> table
     * reference
     */
    public EmployeeAsset() {
        this(DSL.name("employee_asset"), null);
    }

    public <O extends Record> EmployeeAsset(Table<O> child, ForeignKey<O, EmployeeAssetRecord> key) {
        super(child, key, EMPLOYEE_ASSET);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : HumanResourceManagement.HUMAN_RESOURCE_MANAGEMENT;
    }

    @Override
    public Identity<EmployeeAssetRecord, Long> getIdentity() {
        return (Identity<EmployeeAssetRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<EmployeeAssetRecord> getPrimaryKey() {
        return Keys.KEY_EMPLOYEE_ASSET_PRIMARY;
    }

    @Override
    public List<ForeignKey<EmployeeAssetRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK78IRLSPQO8T1YNQKT77N52FFM);
    }

    private transient CategoryCompanyAsset _categoryCompanyAsset;

    /**
     * Get the implicit join path to the
     * <code>human_resource_management.category_company_asset</code> table.
     */
    public CategoryCompanyAsset categoryCompanyAsset() {
        if (_categoryCompanyAsset == null)
            _categoryCompanyAsset = new CategoryCompanyAsset(this, Keys.FK78IRLSPQO8T1YNQKT77N52FFM);

        return _categoryCompanyAsset;
    }

    @Override
    public EmployeeAsset as(String alias) {
        return new EmployeeAsset(DSL.name(alias), this);
    }

    @Override
    public EmployeeAsset as(Name alias) {
        return new EmployeeAsset(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EmployeeAsset rename(String name) {
        return new EmployeeAsset(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EmployeeAsset rename(Name name) {
        return new EmployeeAsset(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, LocalDate, String, Integer, LocalDate, String, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}

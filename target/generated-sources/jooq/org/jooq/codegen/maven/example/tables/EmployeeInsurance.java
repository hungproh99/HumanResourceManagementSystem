/*
 * This file is generated by jOOQ.
 */
package org.jooq.codegen.maven.example.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.codegen.maven.example.HumanResourceManagement;
import org.jooq.codegen.maven.example.Keys;
import org.jooq.codegen.maven.example.tables.records.EmployeeInsuranceRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EmployeeInsurance extends TableImpl<EmployeeInsuranceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>human_resource_management.employee_insurance</code>
     */
    public static final EmployeeInsurance EMPLOYEE_INSURANCE = new EmployeeInsurance();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmployeeInsuranceRecord> getRecordType() {
        return EmployeeInsuranceRecord.class;
    }

    /**
     * The column
     * <code>human_resource_management.employee_insurance.employee_insurance_id</code>.
     */
    public final TableField<EmployeeInsuranceRecord, Long> EMPLOYEE_INSURANCE_ID = createField(DSL.name("employee_insurance_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column
     * <code>human_resource_management.employee_insurance.address</code>.
     */
    public final TableField<EmployeeInsuranceRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>human_resource_management.employee_insurance.insurance_status</code>.
     */
    public final TableField<EmployeeInsuranceRecord, Boolean> INSURANCE_STATUS = createField(DSL.name("insurance_status"), SQLDataType.BIT, this, "");

    /**
     * The column
     * <code>human_resource_management.employee_insurance.employee_id</code>.
     */
    public final TableField<EmployeeInsuranceRecord, String> EMPLOYEE_ID = createField(DSL.name("employee_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>human_resource_management.employee_insurance.policy_name_id</code>.
     */
    public final TableField<EmployeeInsuranceRecord, Long> POLICY_NAME_ID = createField(DSL.name("policy_name_id"), SQLDataType.BIGINT, this, "");

    private EmployeeInsurance(Name alias, Table<EmployeeInsuranceRecord> aliased) {
        this(alias, aliased, null);
    }

    private EmployeeInsurance(Name alias, Table<EmployeeInsuranceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>human_resource_management.employee_insurance</code> table reference
     */
    public EmployeeInsurance(String alias) {
        this(DSL.name(alias), EMPLOYEE_INSURANCE);
    }

    /**
     * Create an aliased
     * <code>human_resource_management.employee_insurance</code> table reference
     */
    public EmployeeInsurance(Name alias) {
        this(alias, EMPLOYEE_INSURANCE);
    }

    /**
     * Create a <code>human_resource_management.employee_insurance</code> table
     * reference
     */
    public EmployeeInsurance() {
        this(DSL.name("employee_insurance"), null);
    }

    public <O extends Record> EmployeeInsurance(Table<O> child, ForeignKey<O, EmployeeInsuranceRecord> key) {
        super(child, key, EMPLOYEE_INSURANCE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : HumanResourceManagement.HUMAN_RESOURCE_MANAGEMENT;
    }

    @Override
    public Identity<EmployeeInsuranceRecord, Long> getIdentity() {
        return (Identity<EmployeeInsuranceRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<EmployeeInsuranceRecord> getPrimaryKey() {
        return Keys.KEY_EMPLOYEE_INSURANCE_PRIMARY;
    }

    @Override
    public List<ForeignKey<EmployeeInsuranceRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKK66MTPNQ5R18DF3YGJ9PA0Y6H, Keys.FK5CS8ONP5MANPP87EX4F6ORT8H);
    }

    private transient Employee _employee;
    private transient PolicyName _policyName;

    /**
     * Get the implicit join path to the
     * <code>human_resource_management.employee</code> table.
     */
    public Employee employee() {
        if (_employee == null)
            _employee = new Employee(this, Keys.FKK66MTPNQ5R18DF3YGJ9PA0Y6H);

        return _employee;
    }

    /**
     * Get the implicit join path to the
     * <code>human_resource_management.policy_name</code> table.
     */
    public PolicyName policyName() {
        if (_policyName == null)
            _policyName = new PolicyName(this, Keys.FK5CS8ONP5MANPP87EX4F6ORT8H);

        return _policyName;
    }

    @Override
    public EmployeeInsurance as(String alias) {
        return new EmployeeInsurance(DSL.name(alias), this);
    }

    @Override
    public EmployeeInsurance as(Name alias) {
        return new EmployeeInsurance(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EmployeeInsurance rename(String name) {
        return new EmployeeInsurance(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EmployeeInsurance rename(Name name) {
        return new EmployeeInsurance(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, String, Boolean, String, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}

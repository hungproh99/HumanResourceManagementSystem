/*
 * This file is generated by jOOQ.
 */
package org.jooq.codegen.maven.example.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.codegen.maven.example.HumanResourceManagement;
import org.jooq.codegen.maven.example.Keys;
import org.jooq.codegen.maven.example.tables.records.DemoRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Demo extends TableImpl<DemoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>human_resource_management.demo</code>
     */
    public static final Demo DEMO = new Demo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DemoRecord> getRecordType() {
        return DemoRecord.class;
    }

    /**
     * The column <code>human_resource_management.demo.id</code>.
     */
    public final TableField<DemoRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>human_resource_management.demo.date</code>.
     */
    public final TableField<DemoRecord, LocalDate> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>human_resource_management.demo.demo2_id</code>.
     */
    public final TableField<DemoRecord, Long> DEMO2_ID = createField(DSL.name("demo2_id"), SQLDataType.BIGINT, this, "");

    private Demo(Name alias, Table<DemoRecord> aliased) {
        this(alias, aliased, null);
    }

    private Demo(Name alias, Table<DemoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>human_resource_management.demo</code> table
     * reference
     */
    public Demo(String alias) {
        this(DSL.name(alias), DEMO);
    }

    /**
     * Create an aliased <code>human_resource_management.demo</code> table
     * reference
     */
    public Demo(Name alias) {
        this(alias, DEMO);
    }

    /**
     * Create a <code>human_resource_management.demo</code> table reference
     */
    public Demo() {
        this(DSL.name("demo"), null);
    }

    public <O extends Record> Demo(Table<O> child, ForeignKey<O, DemoRecord> key) {
        super(child, key, DEMO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : HumanResourceManagement.HUMAN_RESOURCE_MANAGEMENT;
    }

    @Override
    public Identity<DemoRecord, Long> getIdentity() {
        return (Identity<DemoRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<DemoRecord> getPrimaryKey() {
        return Keys.KEY_DEMO_PRIMARY;
    }

    @Override
    public List<ForeignKey<DemoRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK57L0TJ0UTSOKHB7AYXEFKAT3N);
    }

    private transient Demo2 _demo2;

    /**
     * Get the implicit join path to the
     * <code>human_resource_management.demo2</code> table.
     */
    public Demo2 demo2() {
        if (_demo2 == null)
            _demo2 = new Demo2(this, Keys.FK57L0TJ0UTSOKHB7AYXEFKAT3N);

        return _demo2;
    }

    @Override
    public Demo as(String alias) {
        return new Demo(DSL.name(alias), this);
    }

    @Override
    public Demo as(Name alias) {
        return new Demo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Demo rename(String name) {
        return new Demo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Demo rename(Name name) {
        return new Demo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, LocalDate, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}

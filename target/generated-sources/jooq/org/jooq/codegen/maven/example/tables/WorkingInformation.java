/*
 * This file is generated by jOOQ.
 */
package org.jooq.codegen.maven.example.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.codegen.maven.example.HumanResourceManagement;
import org.jooq.codegen.maven.example.Keys;
import org.jooq.codegen.maven.example.tables.records.WorkingInformationRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WorkingInformation extends TableImpl<WorkingInformationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>human_resource_management.working_information</code>
     */
    public static final WorkingInformation WORKING_INFORMATION = new WorkingInformation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WorkingInformationRecord> getRecordType() {
        return WorkingInformationRecord.class;
    }

    /**
     * The column
     * <code>human_resource_management.working_information.working_information_id</code>.
     */
    public final TableField<WorkingInformationRecord, Long> WORKING_INFORMATION_ID = createField(DSL.name("working_information_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column
     * <code>human_resource_management.working_information.end_date</code>.
     */
    public final TableField<WorkingInformationRecord, LocalDate> END_DATE = createField(DSL.name("end_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column
     * <code>human_resource_management.working_information.start_date</code>.
     */
    public final TableField<WorkingInformationRecord, LocalDate> START_DATE = createField(DSL.name("start_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column
     * <code>human_resource_management.working_information.working_contract_id</code>.
     */
    public final TableField<WorkingInformationRecord, Long> WORKING_CONTRACT_ID = createField(DSL.name("working_contract_id"), SQLDataType.BIGINT, this, "");

    private WorkingInformation(Name alias, Table<WorkingInformationRecord> aliased) {
        this(alias, aliased, null);
    }

    private WorkingInformation(Name alias, Table<WorkingInformationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>human_resource_management.working_information</code> table
     * reference
     */
    public WorkingInformation(String alias) {
        this(DSL.name(alias), WORKING_INFORMATION);
    }

    /**
     * Create an aliased
     * <code>human_resource_management.working_information</code> table
     * reference
     */
    public WorkingInformation(Name alias) {
        this(alias, WORKING_INFORMATION);
    }

    /**
     * Create a <code>human_resource_management.working_information</code> table
     * reference
     */
    public WorkingInformation() {
        this(DSL.name("working_information"), null);
    }

    public <O extends Record> WorkingInformation(Table<O> child, ForeignKey<O, WorkingInformationRecord> key) {
        super(child, key, WORKING_INFORMATION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : HumanResourceManagement.HUMAN_RESOURCE_MANAGEMENT;
    }

    @Override
    public Identity<WorkingInformationRecord, Long> getIdentity() {
        return (Identity<WorkingInformationRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<WorkingInformationRecord> getPrimaryKey() {
        return Keys.KEY_WORKING_INFORMATION_PRIMARY;
    }

    @Override
    public List<ForeignKey<WorkingInformationRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKPWT7LUCJ88WG8ODL56CB82H29);
    }

    private transient WorkingContract _workingContract;

    /**
     * Get the implicit join path to the
     * <code>human_resource_management.working_contract</code> table.
     */
    public WorkingContract workingContract() {
        if (_workingContract == null)
            _workingContract = new WorkingContract(this, Keys.FKPWT7LUCJ88WG8ODL56CB82H29);

        return _workingContract;
    }

    @Override
    public WorkingInformation as(String alias) {
        return new WorkingInformation(DSL.name(alias), this);
    }

    @Override
    public WorkingInformation as(Name alias) {
        return new WorkingInformation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkingInformation rename(String name) {
        return new WorkingInformation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkingInformation rename(Name name) {
        return new WorkingInformation(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, LocalDate, LocalDate, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}

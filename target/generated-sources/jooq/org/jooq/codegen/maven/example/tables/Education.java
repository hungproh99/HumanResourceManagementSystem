/*
 * This file is generated by jOOQ.
 */
package org.jooq.codegen.maven.example.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.codegen.maven.example.HumanResourceManagement;
import org.jooq.codegen.maven.example.Keys;
import org.jooq.codegen.maven.example.tables.records.EducationRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Education extends TableImpl<EducationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>human_resource_management.education</code>
     */
    public static final Education EDUCATION = new Education();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EducationRecord> getRecordType() {
        return EducationRecord.class;
    }

    /**
     * The column <code>human_resource_management.education.education_id</code>.
     */
    public final TableField<EducationRecord, Long> EDUCATION_ID = createField(DSL.name("education_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>human_resource_management.education.certificate</code>.
     */
    public final TableField<EducationRecord, String> CERTIFICATE = createField(DSL.name("certificate"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>human_resource_management.education.end_date</code>.
     */
    public final TableField<EducationRecord, LocalDate> END_DATE = createField(DSL.name("end_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>human_resource_management.education.name_school</code>.
     */
    public final TableField<EducationRecord, String> NAME_SCHOOL = createField(DSL.name("name_school"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>human_resource_management.education.start_date</code>.
     */
    public final TableField<EducationRecord, LocalDate> START_DATE = createField(DSL.name("start_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>human_resource_management.education.status</code>.
     */
    public final TableField<EducationRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>human_resource_management.education.employee_id</code>.
     */
    public final TableField<EducationRecord, String> EMPLOYEE_ID = createField(DSL.name("employee_id"), SQLDataType.VARCHAR(255), this, "");

    private Education(Name alias, Table<EducationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Education(Name alias, Table<EducationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>human_resource_management.education</code> table
     * reference
     */
    public Education(String alias) {
        this(DSL.name(alias), EDUCATION);
    }

    /**
     * Create an aliased <code>human_resource_management.education</code> table
     * reference
     */
    public Education(Name alias) {
        this(alias, EDUCATION);
    }

    /**
     * Create a <code>human_resource_management.education</code> table reference
     */
    public Education() {
        this(DSL.name("education"), null);
    }

    public <O extends Record> Education(Table<O> child, ForeignKey<O, EducationRecord> key) {
        super(child, key, EDUCATION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : HumanResourceManagement.HUMAN_RESOURCE_MANAGEMENT;
    }

    @Override
    public UniqueKey<EducationRecord> getPrimaryKey() {
        return Keys.KEY_EDUCATION_PRIMARY;
    }

    @Override
    public List<ForeignKey<EducationRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKRPHG8GBX569XVJ1TXKKT91UY4);
    }

    private transient Employee _employee;

    /**
     * Get the implicit join path to the
     * <code>human_resource_management.employee</code> table.
     */
    public Employee employee() {
        if (_employee == null)
            _employee = new Employee(this, Keys.FKRPHG8GBX569XVJ1TXKKT91UY4);

        return _employee;
    }

    @Override
    public Education as(String alias) {
        return new Education(DSL.name(alias), this);
    }

    @Override
    public Education as(Name alias) {
        return new Education(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Education rename(String name) {
        return new Education(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Education rename(Name name) {
        return new Education(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, LocalDate, String, LocalDate, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}

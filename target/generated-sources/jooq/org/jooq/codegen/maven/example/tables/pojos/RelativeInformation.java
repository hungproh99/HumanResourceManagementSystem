/*
 * This file is generated by jOOQ.
 */
package org.jooq.codegen.maven.example.tables.pojos;


import java.io.Serializable;
import java.time.LocalDate;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RelativeInformation implements Serializable {

    private static final long serialVersionUID = 1L;

    private Long      relativeId;
    private LocalDate birthDate;
    private String    parentName;
    private String    status;
    private String    employeeId;
    private Long      typeId;

    public RelativeInformation() {}

    public RelativeInformation(RelativeInformation value) {
        this.relativeId = value.relativeId;
        this.birthDate = value.birthDate;
        this.parentName = value.parentName;
        this.status = value.status;
        this.employeeId = value.employeeId;
        this.typeId = value.typeId;
    }

    public RelativeInformation(
        Long      relativeId,
        LocalDate birthDate,
        String    parentName,
        String    status,
        String    employeeId,
        Long      typeId
    ) {
        this.relativeId = relativeId;
        this.birthDate = birthDate;
        this.parentName = parentName;
        this.status = status;
        this.employeeId = employeeId;
        this.typeId = typeId;
    }

    /**
     * Getter for
     * <code>human_resource_management.relative_information.relative_id</code>.
     */
    public Long getRelativeId() {
        return this.relativeId;
    }

    /**
     * Setter for
     * <code>human_resource_management.relative_information.relative_id</code>.
     */
    public RelativeInformation setRelativeId(Long relativeId) {
        this.relativeId = relativeId;
        return this;
    }

    /**
     * Getter for
     * <code>human_resource_management.relative_information.birth_date</code>.
     */
    public LocalDate getBirthDate() {
        return this.birthDate;
    }

    /**
     * Setter for
     * <code>human_resource_management.relative_information.birth_date</code>.
     */
    public RelativeInformation setBirthDate(LocalDate birthDate) {
        this.birthDate = birthDate;
        return this;
    }

    /**
     * Getter for
     * <code>human_resource_management.relative_information.parent_name</code>.
     */
    public String getParentName() {
        return this.parentName;
    }

    /**
     * Setter for
     * <code>human_resource_management.relative_information.parent_name</code>.
     */
    public RelativeInformation setParentName(String parentName) {
        this.parentName = parentName;
        return this;
    }

    /**
     * Getter for
     * <code>human_resource_management.relative_information.status</code>.
     */
    public String getStatus() {
        return this.status;
    }

    /**
     * Setter for
     * <code>human_resource_management.relative_information.status</code>.
     */
    public RelativeInformation setStatus(String status) {
        this.status = status;
        return this;
    }

    /**
     * Getter for
     * <code>human_resource_management.relative_information.employee_id</code>.
     */
    public String getEmployeeId() {
        return this.employeeId;
    }

    /**
     * Setter for
     * <code>human_resource_management.relative_information.employee_id</code>.
     */
    public RelativeInformation setEmployeeId(String employeeId) {
        this.employeeId = employeeId;
        return this;
    }

    /**
     * Getter for
     * <code>human_resource_management.relative_information.type_id</code>.
     */
    public Long getTypeId() {
        return this.typeId;
    }

    /**
     * Setter for
     * <code>human_resource_management.relative_information.type_id</code>.
     */
    public RelativeInformation setTypeId(Long typeId) {
        this.typeId = typeId;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final RelativeInformation other = (RelativeInformation) obj;
        if (this.relativeId == null) {
            if (other.relativeId != null)
                return false;
        }
        else if (!this.relativeId.equals(other.relativeId))
            return false;
        if (this.birthDate == null) {
            if (other.birthDate != null)
                return false;
        }
        else if (!this.birthDate.equals(other.birthDate))
            return false;
        if (this.parentName == null) {
            if (other.parentName != null)
                return false;
        }
        else if (!this.parentName.equals(other.parentName))
            return false;
        if (this.status == null) {
            if (other.status != null)
                return false;
        }
        else if (!this.status.equals(other.status))
            return false;
        if (this.employeeId == null) {
            if (other.employeeId != null)
                return false;
        }
        else if (!this.employeeId.equals(other.employeeId))
            return false;
        if (this.typeId == null) {
            if (other.typeId != null)
                return false;
        }
        else if (!this.typeId.equals(other.typeId))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.relativeId == null) ? 0 : this.relativeId.hashCode());
        result = prime * result + ((this.birthDate == null) ? 0 : this.birthDate.hashCode());
        result = prime * result + ((this.parentName == null) ? 0 : this.parentName.hashCode());
        result = prime * result + ((this.status == null) ? 0 : this.status.hashCode());
        result = prime * result + ((this.employeeId == null) ? 0 : this.employeeId.hashCode());
        result = prime * result + ((this.typeId == null) ? 0 : this.typeId.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("RelativeInformation (");

        sb.append(relativeId);
        sb.append(", ").append(birthDate);
        sb.append(", ").append(parentName);
        sb.append(", ").append(status);
        sb.append(", ").append(employeeId);
        sb.append(", ").append(typeId);

        sb.append(")");
        return sb.toString();
    }
}

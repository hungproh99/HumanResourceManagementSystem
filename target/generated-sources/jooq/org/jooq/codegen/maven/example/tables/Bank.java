/*
 * This file is generated by jOOQ.
 */
package org.jooq.codegen.maven.example.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.codegen.maven.example.HumanResourceManagement;
import org.jooq.codegen.maven.example.Keys;
import org.jooq.codegen.maven.example.tables.records.BankRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Bank extends TableImpl<BankRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>human_resource_management.bank</code>
     */
    public static final Bank BANK = new Bank();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BankRecord> getRecordType() {
        return BankRecord.class;
    }

    /**
     * The column <code>human_resource_management.bank.bank_id</code>.
     */
    public final TableField<BankRecord, Long> BANK_ID = createField(DSL.name("bank_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>human_resource_management.bank.account_name</code>.
     */
    public final TableField<BankRecord, String> ACCOUNT_NAME = createField(DSL.name("account_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>human_resource_management.bank.account_number</code>.
     */
    public final TableField<BankRecord, String> ACCOUNT_NUMBER = createField(DSL.name("account_number"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>human_resource_management.bank.address</code>.
     */
    public final TableField<BankRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>human_resource_management.bank.name_bank</code>.
     */
    public final TableField<BankRecord, String> NAME_BANK = createField(DSL.name("name_bank"), SQLDataType.VARCHAR(255), this, "");

    private Bank(Name alias, Table<BankRecord> aliased) {
        this(alias, aliased, null);
    }

    private Bank(Name alias, Table<BankRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>human_resource_management.bank</code> table
     * reference
     */
    public Bank(String alias) {
        this(DSL.name(alias), BANK);
    }

    /**
     * Create an aliased <code>human_resource_management.bank</code> table
     * reference
     */
    public Bank(Name alias) {
        this(alias, BANK);
    }

    /**
     * Create a <code>human_resource_management.bank</code> table reference
     */
    public Bank() {
        this(DSL.name("bank"), null);
    }

    public <O extends Record> Bank(Table<O> child, ForeignKey<O, BankRecord> key) {
        super(child, key, BANK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : HumanResourceManagement.HUMAN_RESOURCE_MANAGEMENT;
    }

    @Override
    public UniqueKey<BankRecord> getPrimaryKey() {
        return Keys.KEY_BANK_PRIMARY;
    }

    @Override
    public Bank as(String alias) {
        return new Bank(DSL.name(alias), this);
    }

    @Override
    public Bank as(Name alias) {
        return new Bank(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Bank rename(String name) {
        return new Bank(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bank rename(Name name) {
        return new Bank(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}

Index: src/main/java/com/csproject/hrm/controllers/HrmController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.csproject.hrm.controllers;\r\n\r\nimport com.csproject.hrm.dto.response.HrmResponse;\r\nimport com.csproject.hrm.services.HumanManagementService;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.List;\r\n\r\nimport static com.csproject.hrm.common.constant.Uri.*;\r\n\r\n@CrossOrigin(origins = \"*\", maxAge = 3600)\r\n@RestController\r\n@RequestMapping(REQUEST_MAPPING)\r\npublic class HrmController {\r\n\r\n    @Autowired\r\n    HumanManagementService humanManagementService;\r\n\r\n    @PostMapping(URI_GET_ALL_EMPLOYEE)\r\n    public ResponseEntity<?> getAllEmployee(@RequestParam String limit, @RequestParam String page) {\r\n        List<HrmResponse> hrmResponses = humanManagementService.getListHumanResource(limit, page);\r\n        return ResponseEntity.ok(hrmResponses);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/csproject/hrm/controllers/HrmController.java b/src/main/java/com/csproject/hrm/controllers/HrmController.java
--- a/src/main/java/com/csproject/hrm/controllers/HrmController.java	
+++ b/src/main/java/com/csproject/hrm/controllers/HrmController.java	
@@ -4,23 +4,31 @@
 import com.csproject.hrm.services.HumanManagementService;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.http.ResponseEntity;
+import org.springframework.security.access.prepost.PreAuthorize;
 import org.springframework.web.bind.annotation.*;
 
 import java.util.List;
 
-import static com.csproject.hrm.common.constant.Uri.*;
+import static com.csproject.hrm.common.constant.Uri.REQUEST_MAPPING;
+import static com.csproject.hrm.common.constant.Uri.URI_GET_ALL_EMPLOYEE;
 
 @CrossOrigin(origins = "*", maxAge = 3600)
 @RestController
 @RequestMapping(REQUEST_MAPPING)
 public class HrmController {
-
-    @Autowired
-    HumanManagementService humanManagementService;
-
-    @PostMapping(URI_GET_ALL_EMPLOYEE)
-    public ResponseEntity<?> getAllEmployee(@RequestParam String limit, @RequestParam String page) {
-        List<HrmResponse> hrmResponses = humanManagementService.getListHumanResource(limit, page);
-        return ResponseEntity.ok(hrmResponses);
-    }
-}
+	
+	@Autowired
+	HumanManagementService humanManagementService;
+	
+	@GetMapping(URI_GET_ALL_EMPLOYEE)
+	public ResponseEntity<?> getAllEmployee(@RequestParam String limit, @RequestParam String page) {
+		List<HrmResponse> hrmResponses = humanManagementService.getListHumanResource(limit, page);
+		return ResponseEntity.ok(hrmResponses);
+	}
+	
+	@PreAuthorize("hasRole('ADMIN')")
+	@GetMapping("/test")
+	public ResponseEntity<?> testPreAuthorize() {
+		return ResponseEntity.ok("tested");
+	}
+}
\ No newline at end of file
Index: src/main/java/com/csproject/hrm/jwt/config/WebSecurityConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.csproject.hrm.jwt.config;\r\n\r\nimport com.csproject.hrm.services.UserDetailsService;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.security.authentication.AuthenticationManager;\r\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\r\nimport org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\r\nimport org.springframework.security.config.http.SessionCreationPolicy;\r\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\r\nimport org.springframework.security.crypto.password.PasswordEncoder;\r\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\r\n\r\n\r\n@Configuration\r\n@EnableWebSecurity\r\n@EnableGlobalMethodSecurity(prePostEnabled = true)\r\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\r\n\r\n    @Autowired\r\n    UserDetailsService userDetailsService;\r\n\r\n    @Autowired\r\n    private AuthEntryPointJwt unauthorizedHandler;\r\n\r\n    @Bean\r\n    public AuthTokenFilter authenticationJwtTokenFilter() {\r\n        return new AuthTokenFilter();\r\n    }\r\n\r\n    @Override\r\n    public void configure(AuthenticationManagerBuilder authenticationManagerBuilder) throws Exception {\r\n        authenticationManagerBuilder.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());\r\n    }\r\n\r\n    @Bean\r\n    @Override\r\n    public AuthenticationManager authenticationManagerBean() throws Exception {\r\n        return super.authenticationManagerBean();\r\n    }\r\n\r\n    @Bean\r\n    public PasswordEncoder passwordEncoder() {\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http.cors().and().csrf().disable()\r\n                .exceptionHandling().authenticationEntryPoint(unauthorizedHandler).and()\r\n                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and()\r\n                .authorizeRequests().antMatchers(\"/hrm/api/**\").permitAll()\r\n                .anyRequest().authenticated();\r\n        http.addFilterBefore(authenticationJwtTokenFilter(), UsernamePasswordAuthenticationFilter.class);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/csproject/hrm/jwt/config/WebSecurityConfig.java b/src/main/java/com/csproject/hrm/jwt/config/WebSecurityConfig.java
--- a/src/main/java/com/csproject/hrm/jwt/config/WebSecurityConfig.java	
+++ b/src/main/java/com/csproject/hrm/jwt/config/WebSecurityConfig.java	
@@ -20,41 +20,43 @@
 @EnableWebSecurity
 @EnableGlobalMethodSecurity(prePostEnabled = true)
 public class WebSecurityConfig extends WebSecurityConfigurerAdapter {
-
-    @Autowired
-    UserDetailsService userDetailsService;
-
-    @Autowired
-    private AuthEntryPointJwt unauthorizedHandler;
-
-    @Bean
-    public AuthTokenFilter authenticationJwtTokenFilter() {
-        return new AuthTokenFilter();
-    }
-
-    @Override
-    public void configure(AuthenticationManagerBuilder authenticationManagerBuilder) throws Exception {
-        authenticationManagerBuilder.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());
-    }
-
-    @Bean
-    @Override
-    public AuthenticationManager authenticationManagerBean() throws Exception {
-        return super.authenticationManagerBean();
-    }
-
-    @Bean
-    public PasswordEncoder passwordEncoder() {
-        return new BCryptPasswordEncoder();
-    }
-
-    @Override
-    protected void configure(HttpSecurity http) throws Exception {
-        http.cors().and().csrf().disable()
-                .exceptionHandling().authenticationEntryPoint(unauthorizedHandler).and()
-                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and()
-                .authorizeRequests().antMatchers("/hrm/api/**").permitAll()
-                .anyRequest().authenticated();
-        http.addFilterBefore(authenticationJwtTokenFilter(), UsernamePasswordAuthenticationFilter.class);
-    }
-}
+	
+	@Autowired
+	UserDetailsService userDetailsService;
+	
+	@Autowired
+	private AuthEntryPointJwt unauthorizedHandler;
+	
+	@Bean
+	public AuthTokenFilter authenticationJwtTokenFilter() {
+		return new AuthTokenFilter();
+	}
+	
+	@Override
+	public void configure(AuthenticationManagerBuilder authenticationManagerBuilder) throws Exception {
+		authenticationManagerBuilder.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());
+	}
+	
+	@Bean
+	@Override
+	public AuthenticationManager authenticationManagerBean() throws Exception {
+		return super.authenticationManagerBean();
+	}
+	
+	@Bean
+	public PasswordEncoder passwordEncoder() {
+		return new BCryptPasswordEncoder();
+	}
+	
+	@Override
+	protected void configure(HttpSecurity http) throws Exception {
+		//		http.authorizeRequests().antMatchers("/test").hasRole("ADMIN") // (1)
+		//		    .antMatchers("/callcenter").hasAnyRole("ADMIN", "CALLCENTER") // (2)
+		//		    .anyRequest().authenticated() // (3)
+		//		    .and().formLogin().and().httpBasic();
+		http.cors().and().csrf().disable().exceptionHandling().authenticationEntryPoint(unauthorizedHandler).and()
+		    .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests()
+		    .antMatchers("/hrm/api/**").permitAll().antMatchers("/test").hasRole("ADMIN").anyRequest().authenticated();
+		http.addFilterBefore(authenticationJwtTokenFilter(), UsernamePasswordAuthenticationFilter.class);
+	}
+}
\ No newline at end of file
Index: src/main/java/com/csproject/hrm/repositories/EmployeeDetailRepository.java
===================================================================
diff --git a/src/main/java/com/csproject/hrm/repositories/EmployeeDetailRepository.java b/src/main/java/com/csproject/hrm/repositories/EmployeeDetailRepository.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/com/csproject/hrm/repositories/EmployeeDetailRepository.java	
@@ -0,0 +1,6 @@
+package com.csproject.hrm.repositories;
+
+import com.csproject.hrm.entities.Employee;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+public interface EmployeeDetailRepository extends JpaRepository<Employee, String>,{}
\ No newline at end of file
Index: src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#MySQL\r\nspring.datasource.url = jdbc:mysql://localhost:3306/human_resource_management\r\nspring.datasource.username = root\r\nspring.datasource.password = huy123\r\nspring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL57Dialect\r\nspring.jpa.generate-ddl = true\r\nspring.jpa.hibernate.ddl-auto = update\r\nspring.jpa.properties.hibernate.show_sql = true\r\nspring.jpa.properties.hibernate.use_sql_comments = true\r\nspring.jpa.properties.hibernate.format_sql = true\r\nspring.jpa.defer-datasource-initialization = true\r\nlogging.level.org.hibernate.SQL = DEBUG\r\nlogging.level.org.hibernate.type = TRACE\r\nserver.error.include-message = always\r\nserver.forward-headers-strategy = FRAMEWORK\r\nspring.mail.host=smtp.gmail.com\r\nspring.mail.port=587\r\nspring.mail.username=huynq08120@gmail.com\r\nspring.mail.password=wagxoxeglspzisie\r\nspring.mail.properties.mail.smtp.auth=true\r\nspring.mail.properties.mail.smtp.starttls.enable=true\r\nbezkoder.app.jwtSecret= human_resource_management\r\nbezkoder.app.jwtExpirationMs= 86400000
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
--- a/src/main/resources/application.properties	
+++ b/src/main/resources/application.properties	
@@ -1,7 +1,7 @@
 #MySQL
 spring.datasource.url = jdbc:mysql://localhost:3306/human_resource_management
-spring.datasource.username = root
-spring.datasource.password = huy123
+spring.datasource.username = ndh4899
+spring.datasource.password = hungnd
 spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL57Dialect
 spring.jpa.generate-ddl = true
 spring.jpa.hibernate.ddl-auto = update
@@ -13,11 +13,11 @@
 logging.level.org.hibernate.type = TRACE
 server.error.include-message = always
 server.forward-headers-strategy = FRAMEWORK
-spring.mail.host=smtp.gmail.com
-spring.mail.port=587
-spring.mail.username=huynq08120@gmail.com
-spring.mail.password=wagxoxeglspzisie
-spring.mail.properties.mail.smtp.auth=true
-spring.mail.properties.mail.smtp.starttls.enable=true
-bezkoder.app.jwtSecret= human_resource_management
-bezkoder.app.jwtExpirationMs= 86400000
\ No newline at end of file
+spring.mail.host = smtp.gmail.com
+spring.mail.port = 587
+spring.mail.username = huynq08120@gmail.com
+spring.mail.password = wagxoxeglspzisie
+spring.mail.properties.mail.smtp.auth = true
+spring.mail.properties.mail.smtp.starttls.enable = true
+bezkoder.app.jwtSecret = human_resource_management
+bezkoder.app.jwtExpirationMs = 86400000
\ No newline at end of file
